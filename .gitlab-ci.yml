# For gitlab what are the things we want to do?
# On commit/Merge into master
# What needs to happen?
# Compile assets
# Deploy to servers (import servers, US and Canada)
#
# This file is a template, and might need editing
# before it works on your project.
# # see https://docs.gitlab.com/ce/ci/yaml/README.html
# for all available options
variables:
  projectname: "Deploy CloverDX Server - Windows"
  projectpkgname: "cloverdx-windows"
  octopusspace: "MigrateTech-CloverDX"
  #  fv_octopusspace: "Filevine"
  fileincludeglob: "**/**"

stages:
  - build
  - octopus-pack
  - octopus-push

image: registry.gitlab.com/filevine/technology/project/filevine-platform/docker-gitlab-runner-linux/master:latest

build:
  stage: build
  script:
    - |
      pwsh -c '
        Write-Output "Remove the Git Directory (causes issues)"
        Remove-Item -Recurse -Force .git/
        Import-Module ./etc/New-CloverAssetsPackage.ps1
        $manifest = Import-PowershellDataFile -Path clover-assets-manifest.psd1
        New-CloverAssetsPackage -DependancyManifest $manifest
        '
  artifacts:
    paths:
      - "."
    expire_in:
      12 hours

pack-master:
  stage: octopus-pack
  script:
    - |
      pwsh -c '
        dir
        $gitversion = (gitversion | convertfrom-json).SemVer
        Write-Output "Remove the Git Directory (causes issues)"
        Remove-Item -Recurse -Force .git/
        octo version
        octo pack --id="${projectpkgname}" --version="${gitversion}" --include="${fileincludeglob}"
        '
  artifacts:
    paths:
      - "*nupkg"
    expire_in:
      60 minutes
  only:
    - master

push-master:
  stage: octopus-push
  script:
      pwsh -c '
        $gitversion = (gitversion | convertfrom-json).SemVer
        octo version
        octo push --package="${projectpkgname}.${gitversion}.nupkg" --space="${octopusspace}" --overwrite-mode="OverwriteExisting"
        octo create-release --project="${projectname}" --space="${octopusspace}" --packageVersion="${gitversion}" --version="${gitversion}" --ignoreExisting'
  only:
    - master

pack-branch:
  stage: octopus-pack
  script:
    - |
      pwsh -c '
        gitversion
        $gitversion = gitversion | convertfrom-json
        $gitbranchkey = ((${gitversion}.BranchName).split('/')[1]).replace('_','-')
        $nupkgversion = ${gitversion}.MajorMinorPatch + "-" + ${gitversion}.PreReleaseLabel
        $releaseversion = ${gitversion}.SemVer + "+" + ${gitversion}.ShortSha + "." + $env:CI_PIPELINE_IID
        Write-Output "Remove the Git Directory (causes issues)"
        Remove-Item -Recurse -Force .git/
        octo version
        octo pack --id="${projectpkgname}" --version="${nupkgversion}" --include="${fileincludeglob}"
        octo pack --id="clover-assets" --version="${nupkgversion}" --include="clover-assets.zip"'
  artifacts:
    paths:
      - "*nupkg"
    expire_in:
      60 minutes
  except:
    - master
    - tags

push-branch:
  stage: octopus-push
  script:
    - |
      pwsh -c '
        $gitversion = gitversion | convertfrom-json
        $gitbranchkey = ((${gitversion}.BranchName).split('/')[1]).replace('_','-')
        $nupkgversion = ${gitversion}.MajorMinorPatch + "-" + ${gitversion}.PreReleaseLabel
        $releaseversion = ${gitversion}.SemVer + "+" + ${gitversion}.ShortSha + "." + $env:CI_PIPELINE_IID
        octo version
        octo push --package="${projectpkgname}.${nupkgversion}.nupkg" --space="${octopusspace}" --overwrite-mode="OverwriteExisting"
        octo push --package="clover-assets.${nupkgversion}.nupkg" --space="${octopusspace}" --overwrite-mode="OverwriteExisting"
        # Also create release for Clover Assets project
        octo create-release --project="Deploy CloverDX Assets - Windows" --space="${octopusspace}" --packageVersion="${nupkgversion}" --version="${releaseversion}" --ignoreExisting
        octo create-release --project="${projectname}" --space="${octopusspace}" --packageVersion="${nupkgversion}" --package clover-assets:${nupkgversion} --version="${releaseversion}" --ignoreExisting'
  except:
    - master
    - tags
